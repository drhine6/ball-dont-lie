// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Seeding configuration
generator prisma_client {
  provider = "prisma-client-js"
  seed     = "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
}

// User model for storing user preferences like theme
model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  name      String?
  theme     String   @default("light") // "light" or "dark"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Team model matching the Team interface in types.ts
model Team {
  id        String   @id @default(uuid())
  name      String   @unique
  logoId    String?
  seed      Int
  brand     String
  region    Region
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  location  String?
  latitude  Float?
  longitude Float?
}

// Game model matching the Game interface in types.ts
model Game {
  id            String     @id @default(uuid())
  gameTitle     String
  region        Region
  balls         String
  recommendation String
  betType       BetType
  confidence    Confidence
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt  
  team1Id       String
  team2Id       String  
  team1Score    Int?
  team2Score    Int?
  outcome String?
}

// Enum types from types.ts
enum Region {
  South
  East
  West
  Midwest
}

enum BetType {
  Upset_Alert @map("Upset Alert")
  Favorite
  Total_Bet   @map("Total Bet")
}

enum Confidence {
  High
  Medium
  Low
}
